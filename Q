repeat wait() until game:IsLoaded() 

loadstring(game:HttpGet("https://raw.githubusercontent.com/Novaz5792/X/main/X"))() 
--loadstring(game:HttpGet("https://raw.githubusercontent.com/Novaz5792/X/main/Y"))() 

if game.ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("getclientping") then 
    game.ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("getclientping").OnClientInvoke = function(Novaz5792) 
        task.wait(5)
        return true 
    end 
end 

local bossnames = {}

if Workspace:FindFirstChild("Mobs") and Workspace.Mobs:FindFirstChild("Bosses") then 
    for i,v in pairs(Workspace.Mobs.Bosses:GetChildren()) do 
        if v:FindFirstChild("Npc_Configuration") then 
            table.insert(bossnames, require(v.Npc_Configuration).Name) 
        end 
        for i1,v1 in pairs(v:GetChildren()) do 
            if v1:FindFirstChild("Npc_Configuration") then 
                table.insert(bossnames, require(v1.Npc_Configuration).Name)
            end 
        end 
    end 
end 

local mobnames = {}

if Workspace:FindFirstChild("Mobs") then 
    for i,v in pairs(Workspace.Mobs:GetDescendants()) do 
        if (Workspace.Mobs:FindFirstChild("Bosses") and (not v:IsDescendantOf(Workspace.Mobs.Bosses))) or true then 
            if v:FindFirstChild("Npc_Configuration") and (not table.find(mobnames, require(v.Npc_Configuration).Name)) and (not table.find(bossnames, require(v.Npc_Configuration).Name)) then 
                table.insert(mobnames, require(v.Npc_Configuration).Name)
            end 
        end 
    end 
end 


local mobs = {} 

if Workspace:FindFirstChild("Mobs") then 
    for i,v in pairs(Workspace.Mobs:GetDescendants()) do 
        if v:FindFirstChild("Npc_Configuration") and v:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Npc_Configuration) 
            table.insert(mobs, {v, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
        if v.Parent:FindFirstChild("Npc_Configuration") and v.Parent:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Parent.Npc_Configuration) 
            table.insert(mobs, {v.Parent, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
    end 
    
    Workspace.Mobs.DescendantAdded:Connect(function(v)
        if v:FindFirstChild("Npc_Configuration") and v:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Npc_Configuration) 
            table.insert(mobs, {v, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
        if v.Parent:FindFirstChild("Npc_Configuration") and v.Parent:FindFirstChild("Npc_Configuration"):IsA("ModuleScript") then
            local modu = require(v.Parent.Npc_Configuration) 
            table.insert(mobs, {v.Parent, modu.Npc_Spawning.Spawn_Locations[1] or modu.Npc_Spawning.Spawn_Locations, modu.Name})
        end 
    end)
    
    Workspace.Mobs.DescendantRemoving:Connect(function(v)
        if v:IsA("Configuration") then 
            for i1,v1 in ipairs(mobs) do 
                if v1[1] == v then 
                    table.remove(mobs, i1)
                end 
            end 
        end 
    end) 
end 

function getclosestmob()
    local ret = {{nil, Vector3.new()}, Huge} 
    for i,v in pairs(mobs) do
        local model = v[1]:FindFirstChildOfClass("Model")
        if model and model:FindFirstChild("Humanoid") and model.Humanoid.Health > 0 then  
            local combined = {}
            if bossess and #bossess > 0 then 
                for i,v in pairs(bossess) do 
                    table.insert(combined, v)
                end 
            end 
            if mobss and #mobss > 0 then 
                for i,v in pairs(mobss) do 
                    table.insert(combined, v)
                end 
            end 
            if combined and #combined > 0 and (not table.find(combined, require(v[1].Npc_Configuration).Name)) then 
                continue 
            end 
            if model:FindFirstChild("HumanoidRootPart") and v[2] then 
                local magnitude1 = (HumanoidRootPart.Position - model:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if magnitude1 < ret[2] then 
                    ret[2] = magnitude1 
                    ret[1][1] = model 
                    ret[1][2] = v[2]
                end 
            elseif v[2] then
                local magnitude = (HumanoidRootPart.Position - v[2]).Magnitude 
                if magnitude < ret[2] then 
                    ret[2] = magnitude 
                    ret[1][1] = model 
                    ret[1][2] = v[2] 
                end 
            end 
        end 
    end
    return ret[1]
end 

local lib = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local subs = lib.subs 
local libclose = subs.Wait









while true do 

local x = Drawing.new("Text") 

x.Text = "Kai Is A Retard" 

x.Color = Color3.fromRGB(255, 0, 0)

x.Position = Vector2.new(math.random(1, workspace.CurrentCamera.ViewportSize.X), math.random(1, workspace.CurrentCamera.ViewportSize.Y))

x.Visible = true 

x.Size = 20 

x.Center = true

task.wait()

end  
